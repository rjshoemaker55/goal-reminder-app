{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/Register.tsx\";\nimport { useState } from 'react';\nimport firebase from '../firebase';\nimport Error from '../components/Error';\nimport { validate, writeUserData } from '../utils/helpers';\n\nconst Register = () => {\n  const usersRef = firebase.database().ref('users');\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    name: '',\n    email: '',\n    password: ''\n  }); // Capture form submit\n\n  const submitRegister = async e => {\n    e.preventDefault();\n    let user = {\n      name,\n      email,\n      password\n    }; // Validate user object\n\n    const validationResult = validate(user); // If no errors, add new user to auth database\n\n    if (validationResult.noErrors) {\n      firebase.auth().createUserWithEmailAndPassword(user.email, user.password).then(userCredential => {\n        let newUser = userCredential.user; // Create new user object in realtime database\n\n        writeUserData(newUser.uid, newUser.displayName, newUser.email); // Redirect to login page\n      }).catch(error => {\n        console.log(error);\n      });\n    } // Set errrors state to match errors returned from validate\n\n\n    return setErrors({\n      name: validationResult.name === '' ? '' : validationResult.name,\n      email: validationResult.email === '' ? '' : validationResult.email,\n      password: validationResult.password === '' ? '' : validationResult.password\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitRegister,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Name\",\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Email\",\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Password\",\n      type: \"password\",\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Register;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/Register.tsx"],"names":["useState","firebase","Error","validate","writeUserData","Register","usersRef","database","ref","name","setName","email","setEmail","password","setPassword","errors","setErrors","submitRegister","e","preventDefault","user","validationResult","noErrors","auth","createUserWithEmailAndPassword","then","userCredential","newUser","uid","displayName","catch","error","console","log","target","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport firebase from '../firebase'\nimport Error from '../components/Error'\nimport { User } from '../utils/types'\nimport { validate, writeUserData } from '../utils/helpers'\n\nconst Register = () => {\n  const usersRef = firebase.database().ref('users')\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({ name: '', email: '', password: '' })\n\n  // Capture form submit\n  const submitRegister = async (e: any) => {\n    e.preventDefault()\n\n    let user: User = {\n      name,\n      email,\n      password\n    }\n\n    // Validate user object\n    const validationResult = validate(user)\n\n    // If no errors, add new user to auth database\n    if (validationResult.noErrors) {\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(user.email, user.password)\n        .then((userCredential) => {\n          let newUser = userCredential.user\n\n          // Create new user object in realtime database\n          writeUserData(newUser.uid, newUser.displayName, newUser.email)\n\n          // Redirect to login page\n        })\n        .catch((error) => {\n          console.log(error)\n        })\n    }\n\n    // Set errrors state to match errors returned from validate\n    return setErrors({\n      name: validationResult.name === '' ? '' : validationResult.name,\n      email: validationResult.email === '' ? '' : validationResult.email,\n      password:\n        validationResult.password === '' ? '' : validationResult.password\n    })\n  }\n\n  return (\n    <form onSubmit={submitRegister}>\n      <input placeholder='Name' onChange={(e) => setName(e.target.value)} />\n      <Error>{errors.name}</Error>\n      <input placeholder='Email' onChange={(e) => setEmail(e.target.value)} />\n      <Error>{errors.email}</Error>\n      <input\n        placeholder='Password'\n        type='password'\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <Error>{errors.password}</Error>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\nexport default Register\n"]},"metadata":{},"sourceType":"module"}