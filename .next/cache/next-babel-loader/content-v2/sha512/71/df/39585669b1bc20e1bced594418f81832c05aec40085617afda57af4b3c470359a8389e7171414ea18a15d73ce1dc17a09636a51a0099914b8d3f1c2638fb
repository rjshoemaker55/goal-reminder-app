{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/Register.tsx\";\nimport { useState } from 'react';\nimport firebase from '../firebase';\nimport Error from '../components/Error';\n\nconst Register = () => {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n\n  // Capture form submit, validate and submit new user\n  const submitRegister = async e => {\n    e.preventDefault();\n    const usersRef = firebase.database().ref('users');\n    let user = {\n      name,\n      email,\n      password\n    }; // Check if each field was filled and set errors state accordingly\n\n    const validationResult = validate(user);\n\n    if (validationResult.noErrors) {\n      console.log('register user');\n    } else {\n      setErrors({\n        name: validationResult.name,\n        email: validationResult.email,\n        password: validationResult.password\n      });\n    }\n\n    function validate(user) {\n      let tempErrors = {\n        name: '',\n        email: '',\n        password: '',\n        noErrors: true\n      };\n      if (user.name === '') tempErrors.name = 'You must enter your name.';\n      let emailPattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/);\n      if (!emailPattern.test(user.email)) tempErrors.email = 'You must enter a valid email.';\n      let passwordPattern = new RegExp(/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?,~_+-=|\\]).{8,32}$/);\n      if (!passwordPattern.test(user.password)) tempErrors.password = 'Your password must contain at least 6 characters, one numeric digit, one uppercase and one lowercase letter.';\n      tempErrors.noErrors = tempErrors.name === '' && tempErrors.email === '' && tempErrors.password === '';\n      return tempErrors;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitRegister,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Name\",\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Email\",\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Password\",\n      type: \"password\",\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Register;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/Register.tsx"],"names":["useState","firebase","Error","Register","name","setName","email","setEmail","password","setPassword","errors","setErrors","submitRegister","e","preventDefault","usersRef","database","ref","user","validationResult","validate","noErrors","console","log","tempErrors","emailPattern","RegExp","test","passwordPattern","target","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport firebase from '../firebase'\nimport Error from '../components/Error'\n\nconst Register = () => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({ name: '', email: '', password: '' })\n\n  interface User {\n    name: string\n    email: string\n    password: string\n  }\n\n  interface UserErrors {\n    name: string\n    email: string\n    password: string\n    noErrors: boolean\n  }\n\n  // Capture form submit, validate and submit new user\n  const submitRegister = async (e: any) => {\n    e.preventDefault()\n    const usersRef = firebase.database().ref('users')\n    let user: User = {\n      name,\n      email,\n      password\n    }\n\n    // Check if each field was filled and set errors state accordingly\n    const validationResult = validate(user)\n\n    if (validationResult.noErrors) {\n      console.log('register user')\n    } else {\n      setErrors({\n        name: validationResult.name,\n        email: validationResult.email,\n        password: validationResult.password\n      })\n    }\n\n    function validate(user: User): UserErrors {\n      let tempErrors: UserErrors = {\n        name: '',\n        email: '',\n        password: '',\n        noErrors: true\n      }\n\n      if (user.name === '') tempErrors.name = 'You must enter your name.'\n\n      let emailPattern = new RegExp(\n        /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/\n      )\n      if (!emailPattern.test(user.email))\n        tempErrors.email = 'You must enter a valid email.'\n\n      let passwordPattern = new RegExp(\n        /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?,~_+-=|\\]).{8,32}$/\n      )\n      if (!passwordPattern.test(user.password))\n        tempErrors.password =\n          'Your password must contain at least 6 characters, one numeric digit, one uppercase and one lowercase letter.'\n\n      tempErrors.noErrors =\n        tempErrors.name === '' &&\n        tempErrors.email === '' &&\n        tempErrors.password === ''\n\n      return tempErrors\n    }\n  }\n  return (\n    <form onSubmit={submitRegister}>\n      <input placeholder='Name' onChange={(e) => setName(e.target.value)} />\n      <Error>{errors.name}</Error>\n      <input placeholder='Email' onChange={(e) => setEmail(e.target.value)} />\n      <Error>{errors.email}</Error>\n      <input\n        placeholder='Password'\n        type='password'\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <Error>{errors.password}</Error>\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\nexport default Register\n"]},"metadata":{},"sourceType":"module"}