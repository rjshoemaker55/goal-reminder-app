{"ast":null,"code":"import { Goal } from '../database/src/entity/Goal.entity';\nimport { getConnection, createConnection } from 'typeorm';\nexport const getOrCreateConnection = () => {\n  try {\n    const conn = getConnection();\n    return conn;\n  } catch (e) {\n    createConnection({\n      type: 'postgres',\n      host: 'localhost',\n      username: 'postgres',\n      password: 'postgres',\n      database: 'goal_keeper',\n      entities: [Goal],\n      synchronize: true,\n      logging: false\n    }).then(async connection => {\n      let goalRepo = connection.getRepository(Goal);\n      let goals = await goalRepo.find();\n      console.log(goals);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/utils/index.ts"],"names":["Goal","getConnection","createConnection","getOrCreateConnection","conn","e","type","host","username","password","database","entities","synchronize","logging","then","connection","goalRepo","getRepository","goals","find","console","log"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oCAArB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,SAAhD;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AACzC,MAAI;AACF,UAAMC,IAAI,GAAGH,aAAa,EAA1B;AACA,WAAOG,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACVH,IAAAA,gBAAgB,CAAC;AACfI,MAAAA,IAAI,EAAE,UADS;AAEfC,MAAAA,IAAI,EAAE,WAFS;AAGfC,MAAAA,QAAQ,EAAE,UAHK;AAIfC,MAAAA,QAAQ,EAAE,UAJK;AAKfC,MAAAA,QAAQ,EAAE,aALK;AAMfC,MAAAA,QAAQ,EAAE,CAACX,IAAD,CANK;AAOfY,MAAAA,WAAW,EAAE,IAPE;AAQfC,MAAAA,OAAO,EAAE;AARM,KAAD,CAAhB,CASGC,IATH,CASQ,MAAOC,UAAP,IAAsB;AAC5B,UAAIC,QAAQ,GAAGD,UAAU,CAACE,aAAX,CAAyBjB,IAAzB,CAAf;AACA,UAAIkB,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD,KAdD;AAeD;AACF,CArBM","sourcesContent":["import { Goal } from '../database/src/entity/Goal.entity'\nimport { getConnection, createConnection } from 'typeorm'\n\nexport const getOrCreateConnection = () => {\n  try {\n    const conn = getConnection()\n    return conn\n  } catch (e) {\n    createConnection({\n      type: 'postgres',\n      host: 'localhost',\n      username: 'postgres',\n      password: 'postgres',\n      database: 'goal_keeper',\n      entities: [Goal],\n      synchronize: true,\n      logging: false\n    }).then(async (connection) => {\n      let goalRepo = connection.getRepository(Goal)\n      let goals = await goalRepo.find()\n\n      console.log(goals)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}