{"ast":null,"code":"import 'reflect-metadata';\nimport { createConnection } from 'typeorm';\nimport nextConnect from 'next-connect';\nimport { Goal } from '../../src/entity/Goal';\nconst handler = nextConnect().get((req, res) => {\n  createConnection().then(async connection => {\n    let goalRepo = connection.getRepository(Goal);\n    const goals = await goalRepo.find();\n    res.statusCode = 200;\n    res.json({\n      status: 'success',\n      data: goals\n    });\n  }).catch(err => res.json({\n    status: 400,\n    data: err\n  }));\n});\nexport default handler;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/api/getGoals.ts"],"names":["createConnection","nextConnect","Goal","handler","get","req","res","then","connection","goalRepo","getRepository","goals","find","statusCode","json","status","data","catch","err"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAAwBA,gBAAxB,QAAgD,SAAhD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAASC,IAAT,QAAqB,uBAArB;AAEA,MAAMC,OAAO,GAAGF,WAAW,GAAoCG,GAA/C,CACd,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZN,EAAAA,gBAAgB,GACbO,IADH,CACQ,MAAOC,UAAP,IAAsB;AAC1B,QAAIC,QAAQ,GAAGD,UAAU,CAACE,aAAX,CAAyBR,IAAzB,CAAf;AAEA,UAAMS,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAApB;AAEAN,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AACPC,MAAAA,MAAM,EAAE,SADD;AAEPC,MAAAA,IAAI,EAAEL;AAFC,KAAT;AAID,GAXH,EAYGM,KAZH,CAYUC,GAAD,IAASZ,GAAG,CAACQ,IAAJ,CAAS;AAAEC,IAAAA,MAAM,EAAE,GAAV;AAAeC,IAAAA,IAAI,EAAEE;AAArB,GAAT,CAZlB;AAaD,CAfa,CAAhB;AAkBA,eAAef,OAAf","sourcesContent":["import 'reflect-metadata'\nimport { getConnection, createConnection } from 'typeorm'\nimport nextConnect from 'next-connect'\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { Goal } from '../../src/entity/Goal'\n\nconst handler = nextConnect<NextApiRequest, NextApiResponse>().get(\n  (req, res) => {\n    createConnection()\n      .then(async (connection) => {\n        let goalRepo = connection.getRepository(Goal)\n\n        const goals = await goalRepo.find()\n\n        res.statusCode = 200\n        res.json({\n          status: 'success',\n          data: goals\n        })\n      })\n      .catch((err) => res.json({ status: 400, data: err }))\n  }\n)\n\nexport default handler\n"]},"metadata":{},"sourceType":"module"}