{"ast":null,"code":"import 'reflect-metadata';\nimport { getConnection, createConnection } from 'typeorm';\nimport nextConnect from 'next-connect';\nimport { Goal } from '../../src/entity/Goal.entity';\nconst handler = nextConnect();\ncreateConnection({\n  type: 'postgres',\n  host: 'localhost',\n  username: 'postgres',\n  password: 'postgres',\n  database: 'goal_keeper',\n  entities: [Goal],\n  synchronize: true,\n  logging: false\n}).then(async connection => {\n  getAllGoals(connection);\n}).catch(err => {\n  if (err.constructor === 'AlreadyHasActiveConnectionError') {\n    let connection = getConnection();\n    console.log(connection);\n    getAllGoals(connection);\n  }\n});\n\nconst getAllGoals = conn => {\n  let goalRepo = conn.getRepository(Goal);\n  handler.get(async (req, res) => {\n    let goals = await goalRepo.find();\n    res.statusCode = 200;\n    res.json({\n      status: 'success',\n      data: goals\n    });\n    conn.close();\n  });\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/api/getGoals.ts"],"names":["getConnection","createConnection","nextConnect","Goal","handler","type","host","username","password","database","entities","synchronize","logging","then","connection","getAllGoals","catch","err","constructor","console","log","conn","goalRepo","getRepository","get","req","res","goals","find","statusCode","json","status","data","close"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,aAAT,EAAwBC,gBAAxB,QAAgD,SAAhD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAASC,IAAT,QAAqB,8BAArB;AAEA,MAAMC,OAAO,GAAGF,WAAW,EAA3B;AAEAD,gBAAgB,CAAC;AACfI,EAAAA,IAAI,EAAE,UADS;AAEfC,EAAAA,IAAI,EAAE,WAFS;AAGfC,EAAAA,QAAQ,EAAE,UAHK;AAIfC,EAAAA,QAAQ,EAAE,UAJK;AAKfC,EAAAA,QAAQ,EAAE,aALK;AAMfC,EAAAA,QAAQ,EAAE,CAACP,IAAD,CANK;AAOfQ,EAAAA,WAAW,EAAE,IAPE;AAQfC,EAAAA,OAAO,EAAE;AARM,CAAD,CAAhB,CAUGC,IAVH,CAUQ,MAAOC,UAAP,IAAsB;AAC1BC,EAAAA,WAAW,CAACD,UAAD,CAAX;AACD,CAZH,EAaGE,KAbH,CAaUC,GAAD,IAAS;AACd,MAAIA,GAAG,CAACC,WAAJ,KAAoB,iCAAxB,EAA2D;AACzD,QAAIJ,UAAU,GAAGd,aAAa,EAA9B;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACAC,IAAAA,WAAW,CAACD,UAAD,CAAX;AACD;AACF,CAnBH;;AAqBA,MAAMC,WAAW,GAAIM,IAAD,IAAU;AAC5B,MAAIC,QAAQ,GAAGD,IAAI,CAACE,aAAL,CAAmBpB,IAAnB,CAAf;AAEAC,EAAAA,OAAO,CAACoB,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9B,QAAIC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAlB;AAEAF,IAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAAS;AACPC,MAAAA,MAAM,EAAE,SADD;AAEPC,MAAAA,IAAI,EAAEL;AAFC,KAAT;AAIAN,IAAAA,IAAI,CAACY,KAAL;AACD,GATD;AAUD,CAbD;;AAeA,eAAe7B,OAAf","sourcesContent":["import 'reflect-metadata'\nimport { getConnection, createConnection } from 'typeorm'\nimport nextConnect from 'next-connect'\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { Goal } from '../../src/entity/Goal.entity'\n\nconst handler = nextConnect<NextApiRequest, NextApiResponse>()\n\ncreateConnection({\n  type: 'postgres',\n  host: 'localhost',\n  username: 'postgres',\n  password: 'postgres',\n  database: 'goal_keeper',\n  entities: [Goal],\n  synchronize: true,\n  logging: false\n})\n  .then(async (connection) => {\n    getAllGoals(connection)\n  })\n  .catch((err) => {\n    if (err.constructor === 'AlreadyHasActiveConnectionError') {\n      let connection = getConnection()\n      console.log(connection)\n      getAllGoals(connection)\n    }\n  })\n\nconst getAllGoals = (conn) => {\n  let goalRepo = conn.getRepository(Goal)\n\n  handler.get(async (req, res) => {\n    let goals = await goalRepo.find()\n\n    res.statusCode = 200\n    res.json({\n      status: 'success',\n      data: goals\n    })\n    conn.close()\n  })\n}\n\nexport default handler\n"]},"metadata":{},"sourceType":"module"}