{"ast":null,"code":"import { createConnection } from 'typeorm';\nimport { Goal } from '../../src/entity/Goal';\nexport default (async (req, res) => {\n  createConnection().then(async connection => {\n    let goalRepo = connection.getRepository(Goal);\n    goalRepo.find().then(goals => {\n      console.log(goals);\n      res.json(goals);\n    }).catch(err => {\n      console.log(err);\n      res.json(err);\n    });\n  }).catch(err => res.json(err)); // createConnection().then(async (connection) => {\n  //   return new Promise(async (resolve, reject) => {\n  //     let goalRepo = connection.getRepository(Goal)\n  //     goalRepo\n  //       .find()\n  //       .then((goals) => {\n  //         res.json(JSON.stringify)\n  //         resolve()\n  //       })\n  //       .catch((err) => {\n  //         res.json(err)\n  //         res.status(405).end()\n  //         return reject()\n  //       })\n  //   })\n  // })\n});","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/projects/goal-reminder-app/pages/api/getGoals.ts"],"names":["createConnection","Goal","req","res","then","connection","goalRepo","getRepository","find","goals","console","log","json","catch","err"],"mappings":"AAAA,SAAwBA,gBAAxB,QAAgD,SAAhD;AACA,SAASC,IAAT,QAAqB,uBAArB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCH,EAAAA,gBAAgB,GACbI,IADH,CACQ,MAAOC,UAAP,IAAsB;AAC1B,QAAIC,QAAQ,GAAGD,UAAU,CAACE,aAAX,CAAyBN,IAAzB,CAAf;AAEAK,IAAAA,QAAQ,CACLE,IADH,GAEGJ,IAFH,CAESK,KAAD,IAAW;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,MAAAA,GAAG,CAACS,IAAJ,CAASH,KAAT;AACD,KALH,EAMGI,KANH,CAMUC,GAAD,IAAS;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAX,MAAAA,GAAG,CAACS,IAAJ,CAASE,GAAT;AACD,KATH;AAUD,GAdH,EAeGD,KAfH,CAeUC,GAAD,IAASX,GAAG,CAACS,IAAJ,CAASE,GAAT,CAflB,EADiC,CAkBjC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnCD","sourcesContent":["import { getConnection, createConnection } from 'typeorm'\nimport { Goal } from '../../src/entity/Goal'\n\nexport default async (req, res) => {\n  createConnection()\n    .then(async (connection) => {\n      let goalRepo = connection.getRepository(Goal)\n\n      goalRepo\n        .find()\n        .then((goals) => {\n          console.log(goals)\n          res.json(goals)\n        })\n        .catch((err) => {\n          console.log(err)\n          res.json(err)\n        })\n    })\n    .catch((err) => res.json(err))\n\n  // createConnection().then(async (connection) => {\n  //   return new Promise(async (resolve, reject) => {\n  //     let goalRepo = connection.getRepository(Goal)\n\n  //     goalRepo\n  //       .find()\n  //       .then((goals) => {\n  //         res.json(JSON.stringify)\n  //         resolve()\n  //       })\n  //       .catch((err) => {\n  //         res.json(err)\n  //         res.status(405).end()\n  //         return reject()\n  //       })\n  //   })\n  // })\n}\n"]},"metadata":{},"sourceType":"module"}